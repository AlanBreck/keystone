# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Page {
  id: ID!
  title: String
  content: String
}

input PageWhereUniqueInput {
  id: ID
}

input PageWhereInput {
  AND: [PageWhereInput!]
  OR: [PageWhereInput!]
  NOT: [PageWhereInput!]
  id: IDFilter
  title: StringFilter
  content: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PageOrderByInput {
  id: OrderDirection
  title: OrderDirection
  content: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input PageUpdateInput {
  title: String
  content: String
}

input PageUpdateArgs {
  where: PageWhereUniqueInput!
  data: PageUpdateInput!
}

input PageCreateInput {
  title: String
  content: String
}

type Navigation {
  id: ID!
  title: String
  color: String
  json: [NavigationJson]
  jsonRaw(hydrateRelationships: Boolean! = false): JSON
}

type NavigationJson {
  title: String
  type: NavigationJsonType
}

interface NavigationJsonType {
  discriminant: String
}

input NavigationWhereUniqueInput {
  id: ID
}

input NavigationWhereInput {
  AND: [NavigationWhereInput!]
  OR: [NavigationWhereInput!]
  NOT: [NavigationWhereInput!]
  id: IDFilter
  title: StringFilter
  color: StringFilter
}

input NavigationOrderByInput {
  id: OrderDirection
  title: OrderDirection
  color: OrderDirection
}

input NavigationUpdateInput {
  title: String
  color: String
  json: [NavigationJsonUpdateInput]
}

input NavigationJsonUpdateInput {
  title: String
  type: NavigationJsonTypeUpdateInput
}

input NavigationJsonTypeUpdateInput {
  url: String
  page: PageRelateToOneForUpdateInput
}

input PageRelateToOneForUpdateInput {
  create: PageCreateInput
  connect: PageWhereUniqueInput
  disconnect: Boolean
}

input NavigationUpdateArgs {
  where: NavigationWhereUniqueInput!
  data: NavigationUpdateInput!
}

input NavigationCreateInput {
  title: String
  color: String
  json: [NavigationJsonCreateInput]
}

input NavigationJsonCreateInput {
  title: String
  type: NavigationJsonTypeCreateInput
}

input NavigationJsonTypeCreateInput {
  url: String
  page: PageRelateToOneForCreateInput
}

input PageRelateToOneForCreateInput {
  create: PageCreateInput
  connect: PageWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createPage(data: PageCreateInput!): Page
  createPages(data: [PageCreateInput!]!): [Page]
  updatePage(where: PageWhereUniqueInput!, data: PageUpdateInput!): Page
  updatePages(data: [PageUpdateArgs!]!): [Page]
  deletePage(where: PageWhereUniqueInput!): Page
  deletePages(where: [PageWhereUniqueInput!]!): [Page]
  createNavigation(data: NavigationCreateInput!): Navigation
  createNavigations(data: [NavigationCreateInput!]!): [Navigation]
  updateNavigation(
    where: NavigationWhereUniqueInput!
    data: NavigationUpdateInput!
  ): Navigation
  updateNavigations(data: [NavigationUpdateArgs!]!): [Navigation]
  deleteNavigation(where: NavigationWhereUniqueInput!): Navigation
  deleteNavigations(where: [NavigationWhereUniqueInput!]!): [Navigation]
}

type Query {
  pages(
    where: PageWhereInput! = {}
    orderBy: [PageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Page!]
  page(where: PageWhereUniqueInput!): Page
  pagesCount(where: PageWhereInput! = {}): Int
  navigations(
    where: NavigationWhereInput! = {}
    orderBy: [NavigationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Navigation!]
  navigation(where: NavigationWhereUniqueInput!): Navigation
  navigationsCount(where: NavigationWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
